import asyncio
import random

from aiogram.enums import ParseMode
from aiogram.types import Message
from typing import Optional

from src.bot.keyboards import get_back_profile_keyboard
from src.core.api.client import GameAPI
from src.core.models.beauty_procedure import BeautyProcedure, Profile, UserRating
from src.utils.logger import logger, set_user_context, clear_user_context


class BeautyManager:
    def __init__(self, api: GameAPI, user_info: Optional[dict] = None):
        self.api = api
        self.user_info = user_info or {}

    def _parse_profile(self, data: dict) -> Optional[Profile]:
        if not data or not data.get("success"):
            return None

        profile_data = data.get("data", {}).get("profile", {})
        return Profile(
            attempts=profile_data.get("attempts", 0),
            score=profile_data.get("score", 0),
            money=profile_data.get("money", 0),
            level=profile_data.get("level", 1),
            attempts_cooldown=profile_data.get("attemptsCooldown", 0),
            attempts_restored_at=profile_data.get("attemptsRestoredAt", 0),
            # --- OUTDATED ---
            # beauty_procedures=[
            #     BeautyProcedure(
            #         id=proc.get("id"),
            #         title=proc.get("title"),
            #         action=proc.get("action"),
            #         cost=proc.get("cost"),
            #         score=proc.get("score"),
            #         multiplier=proc.get("multiplier"),
            #         multiplier_user_money=proc.get("multiplierUserMoney"),
            #         is_new=proc.get("isNew"),
            #         description=proc.get("description")
            #     )
            #     for proc in profile_data.get("beautyProcedures", [])
            # ],
            beauty_procedures=[],
            username=profile_data.get("username"),
        )

    def _parse_user_rating(self, data: dict) -> Optional[UserRating]:
        if not data or not data.get("success"):
            return None

        user_rating_data = data.get("data", {}).get("user", {})
        return UserRating(
            score=user_rating_data.get("score", 0),
            position=user_rating_data.get("position", 0)
        )

    def _parse_beauty_id(self, data: dict) -> Optional[int]:
        if not data or not data.get("success"):
            return None

        items = data.get("data", {}).get("list", [])
        return items[0].get("id") if items else None

    async def get_profile(self) -> Optional[Profile]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        logger.info("Getting profile")
        result = self.api.get_profile()
        return self._parse_profile(result)

    async def get_user_rating(self) -> Optional[UserRating]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∏ÃÜ—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        logger.info("Getting user rating")
        result = self.api.get_user_rating()
        return self._parse_user_rating(result)

    async def print_profile_normalized(self) -> None:
        profile = await self.get_profile()
        if not profile:
            logger.error("Error getting profile")
            return

        print(
            "\033[95m\n=== –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ ===\033[0m"
            f"\nüë§ –ò–º—è: {profile.username}"
            f"\nüåü –†–µ–π—Ç–∏–Ω–≥: {profile.score}"
            f"\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: {profile.attempts}"
            f"\nü™ô –ë–∞–ª–∞–Ω—Å: {profile.money} "
            "\033[95m\n=======================\033[0m"
        )

    async def perform_procedures(self, message: Message) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞–∂–¥—É—é –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            logger.debug("Begin perform_procedures")
            profile = await self.get_profile()
            if not profile:
                logger.error("Cannot get profile")
                await message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", parse_mode=ParseMode.HTML)
                return

            if profile.money < 250:
                logger.warn("Not enough money")
                await message.edit_text("üö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥</b>", parse_mode=ParseMode.HTML)
                return

            # TODO get id by
            b_list =  self.api.list_beauty_procedure()
            if list:
                b_id = self._parse_beauty_id(b_list)
            else:
                logger.error("Cannot get beauty id")
                await message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", parse_mode=ParseMode.HTML)
                return

            result = self.api.perform_beauty_procedure(b_id)
            if result and result.get("success"):
                logger.info(f"Successfully started procedures")
                await message.edit_text(f"‚òëÔ∏è <b>–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã!</b>",
                                        parse_mode=ParseMode.HTML)
            else:
                reason = result.get("data", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
                if reason == "You have reached the day limit of this routine":
                    logger.debug(f"Cannot start procedures", "Reason: You have reached the day limit of this routine", )
                    await message.edit_text(f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</b>\n"
                                            f"–ü—Ä–∏—á–∏–Ω–∞: <b>–ü—Ä–æ—Ü–µ–¥—É—Ä—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã</b>\f",
                                            parse_mode=ParseMode.HTML)
                else:
                    logger.warning(f"Cannot start procedures", "Reason: ", reason)
                    await message.edit_text(f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</b>\n"
                                            f"–ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>\f",
                                            parse_mode=ParseMode.HTML)
                return

            await asyncio.sleep(random.randint(2, 4))
            result = self.api.end_beauty_procedure(b_id, 4)
            if result and result.get("success"):
                logger.info(f"Successfully ended procedures")
                await message.edit_text(f"‚ú® –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!",
                                        parse_mode=ParseMode.HTML)
            else:
                logger.error(f"Cannot end procedures")
                await message.edit_text(f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</b>",
                                        parse_mode=ParseMode.HTML)
                return

        finally:
            if self.user_info:
                clear_user_context()
