from typing import Optional

from src.core.api.client import GameAPI
from src.core.models.beauty_procedure import BeautyProcedure, Profile


class BeautyManager:
    def __init__(self, api: GameAPI):
        self.api = api

    def _parse_profile(self, data: dict) -> Optional[Profile]:
        if not data or not data.get("success"):
            return None

        profile_data = data.get("data", {}).get("profile", {})
        return Profile(
            attempts=profile_data.get("attempts", 0),
            score=profile_data.get("score", 0),
            money=profile_data.get("money", 0),
            level=profile_data.get("level", 1),
            attempts_cooldown=profile_data.get("attemptsCooldown", 0),
            attempts_restored_at=profile_data.get("attemptsRestoredAt", 0),
            beauty_procedures=[
                BeautyProcedure(
                    id=proc.get("id"),
                    title=proc.get("title"),
                    action=proc.get("action"),
                    cost=proc.get("cost"),
                    score=proc.get("score"),
                    multiplier=proc.get("multiplier"),
                    multiplier_user_money=proc.get("multiplierUserMoney"),
                    is_new=proc.get("isNew"),
                    description=proc.get("description")
                )
                for proc in profile_data.get("beautyProcedures", [])
            ],
            username=profile_data.get("username"),
        )

    def get_profile(self) -> Optional[Profile]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
        result = self.api.get_profile()
        return self._parse_profile(result)

    def print_profile_normalized(self) -> None:
        profile = self.get_profile()
        if not profile:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            return

        print(
            "\033[95m\n=== –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ ===\033[0m"
            f"\nüë§ –ò–º—è: {profile.username}"
            f"\nüåü –†–µ–π—Ç–∏–Ω–≥: {profile.score}"
            f"\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: {profile.attempts}"
            f"\nü™ô –ë–∞–ª–∞–Ω—Å: {profile.money} "
        )

    def perform_procedures(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞–∂–¥—É—é –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É"""
        print("\033[96m\n=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—å—é—Ç–∏-–ø—Ä–æ—Ü–µ–¥—É—Ä ===\n\033[0m")

        profile = self.get_profile()
        if not profile:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            return

        procedure_ids = [profile.beauty_procedures[0].id, profile.beauty_procedures[1].id, profile.beauty_procedures[2].id]

        for procedure_id in procedure_ids:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            procedure = next(
                (p for p in profile.beauty_procedures if p.id == procedure_id),
                None
            )

            if not procedure:
                print(f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å ID {procedure_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue

            if profile.can_afford_procedure(procedure.cost):
                result = self.api.perform_beauty_procedure(procedure_id)
                if result and result.get("success"):
                    print(f"‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure.title}")
                    profile.money -= procedure.cost
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É: {procedure.title}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {procedure.title}")

        print(f"\n- –û—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥: {profile.money} ü™ô")
        print("\033[96m\n=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—å—é—Ç–∏-–ø—Ä–æ—Ü–µ–¥—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===\n\033[0m")