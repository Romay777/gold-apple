import asyncio
import random
from typing import Optional

from aiogram.enums import ParseMode
from aiogram.types import Message

from src.bot.keyboards import get_stop_autoplay_keyboard, get_back_profile_keyboard
from src.core.api.client import GameAPI
from src.core.models.game import GameSession, Game, Drop
from src.utils.logger import set_user_context, logger, clear_user_context


class GameManager:
    def __init__(self, api: GameAPI, user_info: Optional[dict] = None):
        self.api = api
        self.user_info = user_info or {}

    def _parse_user_energy(self, data: dict) -> int:
        if not data or not data.get("success"):
            return 0

        return data.get("data", {}).get("profile", {}).get("attempts", 0)

    def _parse_box_drop(self, data: dict) -> Optional[Drop]:
        if not data or not data.get("success"):
            return None

        prizes = data.get("data", {}).get("prizes", [])
        if not prizes or len(prizes) == 0:
            return None

        drop_data = prizes[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ prizes
        return Drop(
            title=drop_data.get("title", "unknown"),
            attempts=drop_data.get("attempts", 0),
            money=drop_data.get("money", 0),
            score=drop_data.get("score", 0)
        )

    def _parse_box_limit(self, data: dict) -> Optional[int]:
        if not data or not data.get("success"):
            return None

        items = data.get("data", {}).get("items", [])
        return items[0].get("limit", 0) if items else 0

    async def get_user_energy(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
        result = self.api.get_profile()
        return self._parse_user_energy(result)

    def _parse_game(self, game_data: dict) -> Game:
        return Game(
            name=game_data.get("name"),
            is_available=game_data.get("isAvailable", False),
            timeout=game_data.get("timeout", 0),
            energy=game_data.get("energy", 0)
        )

    def _parse_game_session(self, session_data: dict) -> Optional[GameSession]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        :param session_data:
        :return: GameSession - –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        """
        log = session_data.get("data", {}).get("log", {})
        return GameSession(
            game_type=log.get("type"),
            max_score=log.get("max_score", 0)
        )

    # async def get_available_games(self) -> List[Game]:
    #     """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""
    #     result = self.api.get_games_list()
    #     if not result or not result.get("success"):
    #         return []
    #
    #     games = result.get("data", {}).get("games", [])
    #     return [self._parse_game(game) for game in games]

    async def _play_game(self, game_name: str, message: Message) -> bool:
        """
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –∏–≥—Ä—ã –≤ –ª—é–±—É—é –∏–≥—Ä—É
        :param game_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        :return: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É {game_name}")

            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            result = self.api.start_game(game_name)
            if not result or not result.get("success"):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É {game_name}")
                await message.edit_text(f"üéÆ <b>{game_name}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å!", parse_mode=ParseMode.HTML)
                return False

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session = self._parse_game_session(result)
            if not session:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏", parse_mode=ParseMode.HTML)
                return False

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            delay = random.uniform(7, 11)
            await asyncio.sleep(delay)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
            end_game_method = getattr(self.api, f"end_{game_name.lower()}_game")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            end_result = end_game_method(50)
            if end_result and end_result.get("success"):
                logger.info(f"–ò–≥—Ä–∞ {game_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—á–µ—Ç–æ–º {50}")
                await message.edit_text(f"üéÆ <b>{game_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á–µ—Ç: {50}",
                                        parse_mode=ParseMode.HTML)
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É {game_name}")
                await message.edit_text(f"üéÆ <b>{game_name}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å!", parse_mode=ParseMode.HTML)
                return False
        finally:
            if self.user_info:
                clear_user_context()


    async def enough_user_energy(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_energy = await self.get_user_energy()

        if user_energy < 1:
            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {user_energy}")
            await message.edit_text(f"‚ö° <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {user_energy}</b>",
                                    parse_mode=ParseMode.HTML)
            return False
        elif not user_energy:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.edit_text("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
                                    parse_mode=ParseMode.HTML)
            return False
        return True

    async def play_jumper(self, message: Message, tg_logging: bool = True) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Jumper"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É Jumper")

            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            result = self.api.start_game("Jumper")
            if not result or not result.get("success"):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É Jumper")
                await message.edit_text(f"üéÆ <b>–ü—Ä—ã–∂–∫–∏</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å!", parse_mode=ParseMode.HTML)
                return False

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session = self._parse_game_session(result)
            if not session:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏", parse_mode=ParseMode.HTML)
                return False

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            # TODO –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∏–≥—Ä
            delay = random.uniform(15, 21)
            await asyncio.sleep(delay)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            end_result = self.api.end_jumper_game(random.randint(200, 220), 100)
            if end_result and end_result.get("success"):
                logger.info(f"–ò–≥—Ä–∞ Jumper –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á–µ—Ç: {end_result.get('data').get('log').get('score', 0)}")
                if tg_logging:
                    await message.edit_text(
                        f"üéÆ <b>–ü—Ä—ã–∂–∫–∏</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –°—á–µ—Ç: {end_result.get('data').get('log').get('score', 0)}"
                        f"\n –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {end_result.get('data').get('log').get('money_collected', 0)}",
                        parse_mode=ParseMode.HTML)
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É Jumper")
                if tg_logging:
                    await message.edit_text(f"üéÆ <b>–ü—Ä—ã–∂–∫–∏</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å!", parse_mode=ParseMode.HTML)
                return False
        finally:
            if self.user_info:
                clear_user_context()


    # TODO runner
    async def play_runner(self, message: Message, tg_logging: bool = True) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Runner"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É Runner")

            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            result = self.api.start_game("Runner")
            if not result or not result.get("success"):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É Runner")
                await message.edit_text(f"üéÆ <b>–ë—å—é—Ç–∏-–ø–∞–¥</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å!", parse_mode=ParseMode.HTML)
                return False

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session = self._parse_game_session(result)
            if not session:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏", parse_mode=ParseMode.HTML)
                return False

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            # TODO –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∏–≥—Ä
            delay = random.uniform(15, 21)
            await asyncio.sleep(delay)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            end_result = self.api.end_runner_game(random.randint(180, 220), 100)
            if end_result and end_result.get("success"):
                logger.info(f"–ò–≥—Ä–∞ Runner –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á–µ—Ç: {end_result.get('data').get('log').get('score', 0)}")
                if tg_logging:
                    await message.edit_text(
                        f"üéÆ <b>–ë—å—é—Ç–∏-–ø–∞–¥</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—á–µ—Ç: {end_result.get('data').get('log').get('score', 0)}"
                        f"\n –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {end_result.get('data').get('log').get('money_collected', 0)}",
                        parse_mode=ParseMode.HTML)
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É Runner")
                if tg_logging:
                    await message.edit_text(f"üéÆ <b>–ë—å—é—Ç–∏-–ø–∞–¥</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å!", parse_mode=ParseMode.HTML)
                return False
        finally:
            if self.user_info:
                clear_user_context()

    async def play_match3(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Match3"""
        return await self._play_game("Match3", message)

    async def play_memories(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Memories"""
        return await self._play_game("Memories", message)


    # TODO make games different
    async def auto_play_games(self, message: Message) -> None:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–≥—Ä–∞–µ—Ç –≤ Jumper —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—è –∏–≥—Ä–æ–∫–∞.
        –î–µ–ª–∞–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –≤ 1 —Å–µ–∫—É–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.
        –ò–º–µ–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
        """
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.auto_play_running = True

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –∏–≥—Ä–æ–∫–∞
            energy = await self.get_user_energy()

            if energy <= 0:
                await message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏–≥—Ä—ã", parse_mode=ParseMode.HTML)
                return

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É –≤ Jumper. –î–æ—Å—Ç—É–ø–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {energy}")
            await message.edit_text(f"üéÆ <b>–ê–≤—Ç–æ-–∏–≥—Ä–∞ Jumper</b> –∑–∞–ø—É—â–µ–Ω–∞!\n–î–æ—Å—Ç—É–ø–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {energy}",
                                    parse_mode=ParseMode.HTML)

            games_played = 0
            total_games = energy

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            keyboard = get_stop_autoplay_keyboard()
            status_message = await message.answer(
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: [{games_played}/{total_games}]",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )

            # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "message is not modified"
            last_status_text = f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: [{games_played}/{total_games}]"

            while games_played < total_games and self.auto_play_running:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å tg_logging=False
                success = await self.play_jumper(message, tg_logging=False)

                if success:
                    games_played += 1
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å—ã–≥—Ä–∞–Ω–∞ –∏–≥—Ä–∞ {games_played} –∏–∑ {total_games}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ {games_played + 1} –∏–∑ {total_games}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                new_status_text = f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: [{games_played}/{total_games}]"
                if new_status_text != last_status_text:
                    try:
                        await status_message.edit_text(
                            new_status_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=keyboard
                        )
                        last_status_text = new_status_text
                    except Exception as e:
                        if "message is not modified" not in str(e):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

                # –î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
                if games_played < total_games and self.auto_play_running:
                    await asyncio.sleep(1)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.auto_play_running:  # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                final_status = f"‚úÖ –ê–≤—Ç–æ-–∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: [{games_played}/{total_games}]"
                if final_status != last_status_text:
                    try:
                        await status_message.edit_text(
                            final_status,
                            parse_mode=ParseMode.HTML,
                            reply_markup=get_back_profile_keyboard()
                        )
                    except Exception as e:
                        if "message is not modified" not in str(e):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

                await message.edit_text(
                    f"üéÆ <b>–ê–≤—Ç–æ-–∏–≥—Ä–∞ Jumper</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{games_played}</b>",
                    parse_mode=ParseMode.HTML
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_play_games: {str(e)}")
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–≥—Ä–µ: {str(e)}", parse_mode=ParseMode.HTML)

        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
            self.auto_play_running = False

    async def start_jumper(self, message: Message):
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            if not await self.enough_user_energy(message):
                return

            if not await self.play_jumper(message):
                await message.edit_text("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –ü—Ä—ã–∂–∫–∏", parse_mode=ParseMode.HTML)
                return
        finally:
            if self.user_info:
                clear_user_context()

    async def start_runner(self, message: Message):
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            if not await self.enough_user_energy(message):
                return

            if not await self.play_runner(message):
                await message.edit_text("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –ë—å—é—Ç–∏-–ø–∞–¥", parse_mode=ParseMode.HTML)
                return
        finally:
            if self.user_info:
                clear_user_context()

    async def start_match3(self, message: Message):
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            if not await self.enough_user_energy(message):
                return

            if not await self.play_match3(message):
                await message.edit_text("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –¢—Ä–∏ –≤ —Ä—è–¥", parse_mode=ParseMode.HTML)
                return
        finally:
            if self.user_info:
                clear_user_context()

    async def start_memories(self, message: Message):
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))

        try:
            if not await self.enough_user_energy(message):
                return

            if not await self.play_memories(message):
                await message.edit_text("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–∏", parse_mode=ParseMode.HTML)
                return
        finally:
            if self.user_info:
                clear_user_context()

    async def open_box(self, message: Message):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π –±–æ–∫—Å –∑–∞ 300 –º–æ–Ω–µ—Ç"""
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        try:
            logger.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –±–æ–∫—Å–∞")

            result = self.api.open_standard_box()
            if not result or not result.get("success"):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫")
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫\n"
                msg += f"üéÅ –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –±–æ–∫—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{await self.get_limit(message)}</b>"
                await message.edit_text(msg, parse_mode=ParseMode.HTML)
                return False

            result = self._parse_box_drop(result)
            logger.info(f"–û—Ç–∫—Ä—ã–ª –±–æ–∫—Å [{result}]")
            msg = f"üéä –í—ã–ø–∞–ª–æ: <b>{result.title}</b>\n"
            msg += f"‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: <b>{result.attempts}</b>\n" if result.attempts is not None else ""
            msg += f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{result.money}</b>\n" if result.money is not None else ""
            msg += f"üåü –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: <b>{result.score}</b>\n" if result.score is not None else ""

            # TODO get limit from list
            msg += f"\nüéÅ –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –±–æ–∫—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{await self.get_limit(message)}</b>"

            await message.edit_text(
                f"{msg}",
                parse_mode=ParseMode.HTML
            )
            return
        finally:
            if self.user_info:
                clear_user_context()

    async def get_limit(self, message: Message) -> int:
        if self.user_info:
            set_user_context(self.user_info.get("id"), self.user_info.get("username"))
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
            result = self.api.get_limit()
            if not result or not result.get("success"):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç")
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç", parse_mode=ParseMode.HTML)
                return False
            return self._parse_box_limit(result)
        finally:
            if self.user_info:
                clear_user_context()
