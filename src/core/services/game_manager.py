import asyncio
import random
from typing import List, Optional

from aiogram.enums import ParseMode
from aiogram.types import Message

from src.core.models.game import GameSession, Game
from src.core.api.client import GameAPI


class GameManager:
    def __init__(self, api: GameAPI):
        self.api = api

    def _parse_user_energy(self, data: dict) -> int:
        if not data or not data.get("success"):
            return None

        profile_data = data.get("data", {}).get("profile", {})
        return profile_data.get("attempts", 0)


    async def get_user_energy(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—å—é—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
        result = self.api.get_profile()
        return self._parse_user_energy(result)

    def _parse_game(self, game_data: dict) -> Game:
        return Game(
            name=game_data.get("name"),
            is_available=game_data.get("isAvailable", False),
            timeout=game_data.get("timeout", 0),
            energy=game_data.get("energy", 0)
        )

    def _parse_game_session(self, session_data: dict) -> Optional[GameSession]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        :param session_data:
        :return: GameSession - –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        """
        log = session_data.get("data", {}).get("log", {})
        return GameSession(
            game_type=log.get("type"),
            max_score=log.get("max_score", 0)
        )

    async def get_available_games(self) -> List[Game]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""
        result = self.api.get_games_list()
        if not result or not result.get("success"):
            return []

        games = result.get("data", {}).get("games", [])
        return [self._parse_game(game) for game in games]

    async def _play_game(self, game_name: str, message: Message) -> bool:
        """
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –∏–≥—Ä—ã –≤ –ª—é–±—É—é –∏–≥—Ä—É
        :param game_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        :return: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        print(f"\033[33m     –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É {game_name}\033[0m")

        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        result = self.api.start_game(game_name)
        if not result or not result.get("success"):
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É {game_name}")
            return False

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session = self._parse_game_session(result)
        if not session:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
            return False

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        delay = random.uniform(9, 15)
        await asyncio.sleep(delay)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
        end_game_method = getattr(self.api, f"end_{game_name.lower()}_game")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        end_result = end_game_method(session.max_score)
        if end_result and end_result.get("success"):
            print(f"\033[97m–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–≥—Ä–∞ {game_name} —Å–æ —Å—á–µ—Ç–æ–º {session.max_score}\033[0m")
            await message.edit_text(f"üéÆ <b>{game_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á–µ—Ç: {session.max_score}", parse_mode=ParseMode.HTML)
            return True
        else:
            print(f"\033[91m–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É {game_name}\033[0m")
            await message.edit_text(f"üéÆ <b>{game_name}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å!", parse_mode=ParseMode.HTML)
            return False

    async def play_jumper(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Jumper"""
        return await self._play_game("Jumper", message)

    async def play_match3(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Match3"""
        return await self._play_game("Match3", message)

    async def play_memories(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Memories"""
        return await self._play_game("Memories", message)

    async def play_runner(self, message: Message) -> bool:
        """–ò–≥—Ä–∞–µ—Ç –≤ Runner"""
        return await self._play_game("Runner", message)



    async def auto_play_games(self, message: Message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è"""
        print("\033[33m=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä ===\033[0m")

        game_sequence = ["Jumper", "Match3", "Runner", "Memories"]  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏

        while True:
            games = await self.get_available_games()
            user_energy = await self.get_user_energy()

            if user_energy < 3:
                print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {user_energy}")
                break
            elif not user_energy:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break


            for game_name in game_sequence:
                game = next((g for g in games if g.name == game_name), None)

                if not game or not game.is_available or user_energy < game.energy:
                    print(f"–ò–≥—Ä–∞ {game_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è (–∫–æ–ª-–≤–æ: {user_energy})")
                    continue

                try:
                    await message.edit_text(f"üéÆ –ò–≥—Ä–∞–µ–º –≤ <b>{game_name}</b>...", parse_mode=ParseMode.HTML)
                    play_method = getattr(self, f"play_{game_name.lower()}")
                    if not await play_method(message):
                        await message.edit_text(f"‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ <b>{game_name}</b>", parse_mode=ParseMode.HTML)
                    await asyncio.sleep(2)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
                    user_energy = await self.get_user_energy()
                    if not user_energy:
                        await message.edit_text(f"‚ö° <b>–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è</b>", parse_mode=ParseMode.HTML)
                        await asyncio.sleep(2)
                        break

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {game_name}: {e}")
                    break

            else:
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                print("–ù–∏ –æ–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫.")
                await message.edit_text(f"üéÆ <b>–°—ã–≥—Ä–∞–ª–∏ –≤–æ –≤—Å–µ –∏–≥—Ä—ã</b>", parse_mode=ParseMode.HTML)
                break

        print("\033[33m=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===\033[0m")

