from typing import Dict, List

from src.core.api.client import QuestAPI
from src.core.models.enums import QuestStatus
from src.core.models.quest import Quest
from src.utils.encodings import fix_encoding


class QuestManager:
    def __init__(self, api: QuestAPI):
        self.api = api

    @staticmethod
    def _parse_quest(quest_data: dict) -> Quest:
        return Quest(
            id=quest_data.get("id", ""),
            text=fix_encoding(quest_data.get("text", "")),
            description=fix_encoding(quest_data.get("description", "")),
            is_complete=quest_data.get("isComplete", False),
            is_daily=quest_data.get("isDaily", False),
            is_collected=quest_data.get("isCollected", False),
            trigger_count=quest_data.get("triggerCount", ""),
            progress=quest_data.get("progress")
        )

    def get_daily_quests(self) -> Dict[QuestStatus, List[Quest]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"""
        result = self.api.get_quests()
        if not result or not result.get("success"):
            return {status: [] for status in QuestStatus}

        quests = result.get("data", {}).get("quests", [])
        daily_quests: Dict[QuestStatus, List[Quest]] = {status: [] for status in QuestStatus}

        for quest_data in quests:
            if quest_data.get("isDaily"):
                quest = QuestManager._parse_quest(quest_data)
                daily_quests[quest.status].append(quest)

        return daily_quests

    def print_daily_quests_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"""
        daily_quests = self.get_daily_quests()

        print("\033[38;5;223m\n=== –°—Ç–∞—Ç—É—Å –î–Ω–µ–≤–Ω—ã—Ö –ó–∞–¥–∞—á ===\033[0m", end="")
        for status, quests in daily_quests.items():
            print(f"\033[97m\n{status.value.upper()} ({len(quests)} –∑–∞–¥–∞—á(-a):\033[0m")

            if not quests:
                print("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                continue
            for quest in quests:
                print(f"- {quest.text}")
                if quest.progress:
                    print(f"    ¬∑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {quest.progress}/{quest.trigger_count}")

    def collect_rewards_for_completed_quests(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"""
        print("\033[96m\n=== –°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã ===\033[0m")

        quests = self.get_daily_quests()
        completed_quests = quests.get(QuestStatus.COMPLETED_UNCOLLECTED, [])

        if not completed_quests:
            print("    üéÅ –í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã")
            return

        for quest in completed_quests:
            result = self.api.collect_quest_reward(quest.id)
            if result and result.get("success"):
                print(f"    –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç '{quest.text}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞")
            else:
                print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–≤–µ—Å—Ç '{quest.text}'")
